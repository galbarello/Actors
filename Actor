public abstract class Actor
         {
         3:  
      private Task lastTask = TaskEx.FromResult(0);
         4:  
      private
      object objLock = newobject();
         5:   
         6:  
      public Task<R> Execute<T, R>(Func<T, Task<R>> function, T arg)
         7:      {
         8:  
      if (!function.Method.IsStatic)
         9:          {
        10:  
      throw
      new ArgumentException("Function must be static");
        11:          }
        12:   
        13:          var tcs = new TaskCompletionSource<R>();
        14:   
        15:          Task<R> task = null;
        16:  
      lock (this.objLock)
        17:          {
        18:              task = this.lastTask.ContinueWith(_ => function(arg)).Unwrap();
        19:  
      this.lastTask = task;
        20:          }
        21:   
        22:          task.ContinueWith(t => tcs.TrySetResult(t.Result), TaskContinuationOptions.OnlyOnRanToCompletion);
        23:          task.ContinueWith(t => tcs.TrySetException(t.Exception), TaskContinuationOptions.OnlyOnFaulted);
        24:          task.ContinueWith(t => tcs.TrySetCanceled(), TaskContinuationOptions.OnlyOnCanceled);
        25:   
        26:  
      return tcs.Task;
        27:      }
        28:  }